Комаров Максим
Метелев Никита
Dp1. Найти n-ное число Фибоначчи с помощью динамического программирования. 
public class FibonachiNumbers
{
    public int[] fibonacciNum;
    int count;
    public FibonachiNumbers(int _count)
    {
        count = _count;
        fibonacciNum = new int[count];
        fibonacciNum[0] = 0;
        fibonacciNum[1] = 1;
    }

    public int this[int index]
    {
        get
        {
            if (index < 0 || index >= count) throw new Exception("Out from array");
            return fibonacciNum.ElementAt(index);
        }
        set
        {
            if (index < 0 || index >+ count) throw new IndexOutOfRangeException();
            else
            {
                fibonacciNum[index] = value;
            }
        }
    }
}

class Programm
{
    public static int GetFibonachi(int n)
    {
        var fibonacciNum = new FibonachiNumbers(n);
        for (var i = 2; i < n; i++)
        {
            fibonacciNum[i] = fibonacciNum[i - 1] + fibonacciNum[i - 2];
        }
        return fibonacciNum[n - 1] + fibonacciNum[n - 2];
    }

    public static void Main()
    {

        Console.WriteLine(GetFibonachi(10));
    }
}

Dp2. Лягушка прыгает по кочкам, расположенным в один ряд. Лягушка прыгает только вперед, и за один прыжок может перепрыгнуть через одну или две кочки. То есть с первой кочки она может попасть на третью или четвертую. Сколькими способами лягушка может попасть на i-ю кочку в ряду, если изначально она находится на первой?

    //Получается, что из i точки можно попасть n[i-1] + n[i-2] количеством путей
    //n - массив хранящий пути
    public static int[] frogMap;

    public static int PathSearcher(int position)
    {
        if (position < 4) 
            return frogMap[position];
        frogMap[position-2] = PathSearcher(position-2);
        frogMap[position-3] = PathSearcher(position-3);
        return frogMap[position-2] + frogMap[position-3];
    }

    public static void Main()
    {
        //Индексация с 0 позиции
        var positionToSearch = 11;
        frogMap = new int[positionToSearch];
        frogMap[0] = 0;
        frogMap[1] = 0;
        frogMap[2] = 1;
        frogMap[3] = 1;
        Console.WriteLine(PathSearcher(positionToSearch));
       
    }

    //Индексация с 1 позиции
    public static Dictionary<int,int> path = new Dictionary<int, int>();
    public static void Main()
    {
        path[0] = 0;
        path[1] = 1;
        path[2] = 0;
        var c = FindPath(12);
    }
    public static int FindPath(int c)
    {
        for (var i = 3; i <= c; i++)
        {
            path.Add(i, path[i - 2] + path[i-3]);
        }
        return path[c];
    }